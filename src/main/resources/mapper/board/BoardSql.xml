<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.board.mapper.BoardMapper">
	<!-- ResultMap 정의 -->
	<resultMap id="BoardResultMap" type="BoardDto">
		<id property="id" column="id"/>
		<result property="userId" column="user_id"/>
		<result property="createdAt" column="created_at"/>
		<result property="content" column="content"/>
		<collection property="hashtags" ofType="HashtagDto">
			<id property="id" column="tag_id"/>
			<result property="tag" column="tag"/>
		</collection>
	</resultMap>

	<!-- 게시물 상세 정보를 위한 ResultMap -->
	<resultMap id="BoardDetailResultMap" type="BoardDto">
		<id property="id" column="id"/>
		<result property="createdAt" column="createdAt"/>
		<result property="content" column="content"/>
		<result property="likesCount" column="likesCount"/>
		<result property="commentCount" column="commentCount"/>
		
		<association property="user" javaType="UserDto">
			<id property="id" column="userId"/>
			<result property="nickname" column="userNickname"/>
			<result property="profileImage" column="userProfileImage"/>
			<result property="myIntro" column="myIntro"/>
		</association>

		<collection property="images" ofType="BoardImageDto">
			<id property="id" column="imageId"/>
			<result property="fileName" column="fileName"/>
		</collection>
	</resultMap>

	<!-- 댓글 관련 ResultMap -->
	<resultMap id="CommentResultMap" type="CommentDto">
		<id property="id" column="id"/>
		<result property="parentId" column="parentId"/>
		<result property="boardId" column="boardId"/>
		<result property="comment" column="comment"/>
		<result property="createdAt" column="createdAt"/>
		
		<association property="user" javaType="UserDto">
			<id property="id" column="userId"/>
			<result property="nickname" column="userNickname"/>
			<result property="profileImage" column="userProfileImage"/>
		</association>
	</resultMap>

	<!-- 사용자별 게시물 조회 -->
	<select id="getSelectUserId" parameterType="int" resultMap="BoardResultMap">
		SELECT b.id, b.user_id, b.created_at, b.content,
			   h.id as tag_id, h.tag
		FROM board b
		LEFT JOIN board_hashtag bh ON b.id = bh.board_id
		LEFT JOIN hashtag h ON bh.tag_id = h.id
		WHERE b.user_id = #{userId}
		ORDER BY b.created_at DESC
	</select>
	
	<!-- 게시물 목록 조회 -->
	<select id="getBoardList" resultMap="BoardResultMap">
		SELECT b.id, b.user_id, b.created_at, b.content,
			   h.id as tag_id, h.tag
		FROM board b
		LEFT JOIN board_hashtag bh ON b.id = bh.board_id
		LEFT JOIN hashtag h ON bh.tag_id = h.id
		ORDER BY b.created_at DESC
	</select>
	
	<!-- 특정 게시물 조회 -->
	<select id="getBoard" parameterType="int" resultMap="BoardResultMap">
		SELECT b.id, b.user_id, b.created_at, b.content,
			   h.id as tag_id, h.tag
		FROM board b
		LEFT JOIN board_hashtag bh ON b.id = bh.board_id
		LEFT JOIN hashtag h ON bh.tag_id = h.id
		WHERE b.id = #{boardId}
	</select>

	<!-- 해시태그 등록 -->
	<insert id="insertBoardHashtag">
		INSERT INTO board_hashtag (board_id, tag_id)
		VALUES (#{boardId}, #{tagId})
	</insert>
	
	<!-- 해시태그로 게시물 검색 -->
	<select id="searchBoardsByHashtag" parameterType="string" resultMap="BoardResultMap">
		SELECT b.id, b.user_id, b.created_at, b.content,
			   h.id as tag_id, h.tag
		FROM board b
		INNER JOIN board_hashtag bh ON b.id = bh.board_id
		INNER JOIN hashtag h ON bh.tag_id = h.id
		WHERE h.tag LIKE CONCAT('%', #{keyword}, '%')
		ORDER BY b.created_at DESC
	</select>

	<!-- 기본 CRUD 작업 -->
	<select id="selectAllBoards" resultType="BoardDto">
		SELECT id, user_id AS userId, created_at AS createdAt, content
		FROM board
	</select>

	<select id="selectBoardById" parameterType="int" resultType="BoardDto">
		SELECT id, user_id AS userId, created_at AS createdAt, content
		FROM board
		WHERE id = #{id}
	</select>

	<insert id="insertBoard" parameterType="BoardDto" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO board (user_id, created_at, content)
		VALUES (#{userId}, #{createdAt}, #{content})
	</insert>

	<update id="updateBoard" parameterType="BoardDto">
		UPDATE board
		SET content = #{content}
		WHERE id = #{id}
	</update>

	<delete id="deleteBoard" parameterType="int">
		DELETE FROM board
		WHERE id = #{id}
	</delete>

	<!-- 게시판 상세 정보 조회 -->
	<select id="selectBoardDetail" parameterType="int" resultMap="BoardDetailResultMap">
		SELECT
			b.id,
			b.created_at AS createdAt,
			b.content,
			u.id AS userId,
			u.nickname AS userNickname,
			u.profile_image AS userProfileImage,
			COUNT(DISTINCT bl.id) AS likesCount,
			COUNT(DISTINCT c.id) AS commentCount,
			bi.id AS imageId,
			bi.file_name AS fileName
		FROM board b
		JOIN user u ON b.user_id = u.id
		LEFT JOIN board_like bl ON b.id = bl.board_id
		LEFT JOIN board_image bi ON b.id = bi.board_id
		LEFT JOIN comment c ON b.id = c.board_id
		WHERE b.id = #{boardId}
		GROUP BY b.id, b.created_at, b.content, u.id, u.nickname, u.profile_image, u.my_intro, bi.id, bi.file_name
		ORDER BY b.created_at ASC
	</select>

	<!-- 모든 게시판 목록 상세 정보 조회 -->
	<select id="selectAllBoardsWithDetails" resultMap="BoardDetailResultMap">
		SELECT
			b.id AS id,
			b.created_at AS createdAt,
			b.content AS content,
			u.id AS userId,
			u.nickname AS userNickname,
			u.profile_image AS userProfileImage,
			u.my_intro AS myIntro,
			COUNT(DISTINCT bl.id) AS likesCount,
			COUNT(c.id) AS commentCount,
			bi.id AS imageId,
			bi.file_name AS fileName
		FROM board b
		JOIN user u ON b.user_id = u.id
		LEFT JOIN board_like bl ON b.id = bl.board_id
		LEFT JOIN board_image bi ON b.id = bi.board_id
		LEFT JOIN comment c ON b.id = c.board_id
		GROUP BY b.id, u.id, bi.id, bi.file_name
		ORDER BY b.created_at DESC
	</select>

	<!-- 댓글 관련 쿼리 -->
	<select id="selectCommentsByBoardId" resultMap="CommentResultMap">
		SELECT 
			c.id, 
			c.parent_id AS parentId, 
			c.board_id AS boardId, 
			c.user_id AS userId, 
			c.comment, 
			c.created_at AS createdAt,
			u.nickname AS userNickname, 
			u.profile_image AS userProfileImage
		FROM comment c
		JOIN user u ON c.user_id = u.id
		WHERE c.board_id = #{boardId}
		ORDER BY c.created_at ASC
	</select>

	<insert id="insertComment" parameterType="CommentDto">
		INSERT INTO comment (board_id, user_id, comment, created_at)
		VALUES (#{boardId}, #{userId}, #{comment}, NOW())
	</insert>
	
	<insert id="insertReply" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO comment (board_id, user_id, comment, parent_id, created_at)
		VALUES (#{boardId}, #{userId}, #{comment}, #{parentId}, NOW())
	</insert>

	<delete id="deleteComment">
		DELETE FROM comment WHERE id = #{id}
	</delete>

	<!-- 좋아요 관련 쿼리 -->
	<select id="isLiked" resultType="int">
		SELECT COUNT(*) FROM board_like
		WHERE board_id = #{postId} AND user_id = #{userId}
	</select>

	<insert id="insertLike">
		INSERT INTO board_like (user_id, board_id)
		VALUES (#{userId}, #{postId})
	</insert>

	<delete id="deleteLike">
		DELETE FROM board_like
		WHERE user_id = #{userId} AND board_id = #{postId}
	</delete>

	<select id="countLikes" resultType="int">
		SELECT COUNT(*) FROM board_like
		WHERE board_id = #{postId}
	</select>
	
	<!-- 최근 게시글 조회 -->
	<resultMap id="boardPreviewMap" type="BoardDto">
	    <id property="id" column="id"/>
	    <result property="content" column="content"/>
	    <result property="nickname" column="userNickname"/>
	    
	    <collection property="imageUrls" ofType="string">
	        <result column="imageUrls"/>
	    </collection>
	</resultMap>
	
	<select id="selectBoardPreview" parameterType="map" resultMap="boardPreviewMap">
	    SELECT
	        b.id AS id,
	        b.content AS content,
	        u.nickname AS userNickname,
	        bi.file_name AS imageUrls
	    FROM 
	        board b
	    JOIN user u ON b.user_id = u.id
	    LEFT JOIN board_image bi ON b.id = bi.board_id
	    ORDER BY 
	        b.created_at DESC
	    LIMIT 10
	</select>


</mapper>
