<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.board.mapper.BoardMapper">

	<!-- 게시판 상세 정보 조회 (이미지, 좋아요 수 포함) -->
	<select id="selectBoardDetail" parameterType="int"
		resultMap="BoardDetailResultMap">
		SELECT
		b.id,
		b.created_at AS createdAt,
		b.content,
		u.id AS
		userId,
		u.nickname AS userNickname,
		u.profile_image AS userProfileImage,
		COUNT(DISTINCT bl.id) AS likesCount,
		COUNT(DISTINCT c.id) AS
		commentCount,
		bi.id AS imageId,
		bi.file_name AS fileName
		FROM
		board b
		JOIN
		user u ON b.user_id = u.id
		LEFT JOIN
		board_like bl ON b.id = bl.board_id
		LEFT JOIN
		board_image bi ON b.id = bi.board_id
		LEFT JOIN
		comment c ON
		b.id = c.board_id
		WHERE
		b.id = #{boardId}
		GROUP BY
		b.id, b.created_at,
		b.content, u.id, u.nickname, u.profile_image,
		u.my_intro, bi.id,
		bi.file_name
		ORDER BY
		b.created_at ASC
	</select>

	<resultMap id="BoardDetailResultMap" type="BoardDto">
		<id property="id" column="id" />
		<result property="createdAt" column="createdAt" />
		<result property="content" column="content" />
		<result property="likesCount" column="likesCount" />
		<result property="commentCount" column="commentCount" />
		<result property="likedByCurrentUser"
			column="likedByCurrentUser" />
		<result property="followedByCurrentUser"
			column="followedByCurrentUser" />
		<result property="followerCount" column="followerCount" />

		<!-- 사용자 정보 -->
		<association property="user" javaType="UserDto">
			<id property="id" column="userId" />
			<result property="nickname" column="userNickname" />
			<result property="profileImage" column="userProfileImage" />
			<result property="myIntro" column="myIntro" />
		</association>

		<!-- 이미지 목록 -->
		<collection property="images" ofType="BoardImageDto">
			<id property="id" column="imageId" />
			<result property="fileName" column="fileName" />
		</collection>

		<!-- 해시태그 목록 -->
		<collection property="hashtags" ofType="HashtagDto">
			<id property="id" column="hashtagId" />
			<result property="tag" column="hashtagTag" />
		</collection>
	</resultMap>


	<!-- 모든 게시판 목록 상세 정보 조회 -->
	<!-- 모든 게시판 목록 상세 정보 조회 -->
	<select id="selectAllBoardsWithDetails"
		resultMap="BoardDetailResultMap">
		SELECT
		b.id AS id,
		b.created_at AS createdAt,
		b.content AS
		content,
		u.id AS userId,
		u.nickname AS userNickname,
		u.profile_image AS
		userProfileImage,
		u.my_intro AS myIntro,

		COUNT(DISTINCT bl.id) AS
		likesCount,
		COUNT(DISTINCT c.id) AS commentCount,
		bi.id AS imageId,
		bi.file_name AS fileName,

		-- 해시태그 관련
		ht.id AS hashtagId,
		ht.tag AS
		hashtagTag,

		-- 좋아요 여부
		CASE
		WHEN EXISTS (
		SELECT 1
		FROM board_like bl2
		WHERE
		bl2.board_id = b.id AND bl2.user_id = #{userId}
		) THEN TRUE
		ELSE FALSE
		END AS likedByCurrentUser,

		-- 팔로우 여부
		CASE
		WHEN EXISTS (
		SELECT 1
		FROM
		follow f
		WHERE f.user_id1 = #{userId} AND f.user_id2 = u.id
		) THEN TRUE
		ELSE FALSE
		END AS followedByCurrentUser,

		-- 팔로워 수
		(
		SELECT COUNT(*)
		FROM
		follow f2
		WHERE f2.user_id2 = u.id
		) AS followerCount

		FROM
		board b
		JOIN
		user u ON b.user_id = u.id
		LEFT JOIN board_like bl ON b.id =
		bl.board_id
		LEFT JOIN board_image bi ON b.id = bi.board_id
		LEFT JOIN
		comment c ON b.id = c.board_id
		LEFT JOIN board_hashtag bh ON b.id =
		bh.board_id
		LEFT JOIN hashtag ht ON bh.tag_id = ht.id

		GROUP BY
		b.id,
		u.id, bi.id, bi.file_name, ht.id, ht.tag

		ORDER BY
		b.created_at DESC
	</select>



	<!-- 댓글 관련 ResultMap -->
	<resultMap id="CommentResultMap" type="CommentDto">
		<id property="id" column="id" />
		<result property="parentId" column="parentId" />
		<result property="boardId" column="boardId" />
		<result property="comment" column="comment" />
		<result property="createdAt" column="createdAt" />

		<!-- 댓글 작성자 정보 -->
		<association property="user" javaType="UserDto">
			<id property="id" column="userId" />
			<result property="nickname" column="userNickname" />
			<result property="profileImage" column="userProfileImage" />
		</association>
	</resultMap>

	<!-- 댓글 추가 -->
	<insert id="insertComment" parameterType="CommentDto">
		INSERT INTO comment
		(board_id, user_id, comment, created_at)
		VALUES (#{boardId}, #{userId},
		#{comment}, NOW())
	</insert>

	<!-- 답글 작성 -->
	<insert id="insertReply" useGeneratedKeys="true"
		keyProperty="id">
		INSERT INTO comment (board_id, user_id, comment,
		parent_id, created_at)
		VALUES (#{boardId}, #{userId}, #{comment},
		#{parentId}, NOW())
	</insert>

	<!-- 댓글 삭제 -->
	<delete id="deleteComment">
		DELETE FROM comment WHERE id = #{id}
	</delete>


	<!-- 특정 게시물에 대한 댓글 조회 -->
	<select id="selectCommentsByBoardId"
		resultMap="CommentResultMap">
		SELECT
		c.id,
		c.parent_id AS parentId,
		c.board_id AS boardId,
		c.user_id AS userId,
		c.comment,
		c.created_at AS createdAt,
		u.nickname AS
		userNickname,
		u.profile_image AS userProfileImage
		FROM
		comment c
		JOIN
		user
		u ON c.user_id = u.id
		WHERE
		c.board_id = #{boardId}
		ORDER BY
		c.created_at
		ASC
	</select>


	<select id="isLiked" resultType="int">
		SELECT COUNT(*) FROM board_like
		WHERE board_id = #{postId} AND user_id = #{userId}
	</select>

	<insert id="insertLike">
		INSERT INTO board_like (user_id, board_id)
		VALUES
		(#{userId}, #{postId})
	</insert>

	<delete id="deleteLike">
		DELETE FROM board_like
		WHERE user_id = #{userId} AND
		board_id = #{postId}
	</delete>

	<select id="countLikes" resultType="int">
		SELECT COUNT(*) FROM
		board_like
		WHERE board_id = #{postId}
	</select>






	<!-- 특정 사용자가 타겟 사용자를 팔로우했는지 확인 -->
	<select id="isFollowed" resultType="int">
		SELECT COUNT(*)
		FROM follow
		WHERE user_id1 = #{userId} AND user_id2 = #{targetUserId}
	</select>

	<!-- 팔로우 추가 -->
	<insert id="insertFollow">
		INSERT INTO follow (user_id1, user_id2)
		VALUES
		(#{userId}, #{targetUserId})
	</insert>

	<!-- 팔로우 삭제 -->
	<delete id="deleteFollow">
		DELETE FROM follow
		WHERE user_id1 = #{userId} AND
		user_id2 = #{targetUserId}
	</delete>

	<!-- 팔로워 수 카운트 -->
	<select id="countFollowers" resultType="int">
		SELECT COUNT(*)
		FROM
		follow
		WHERE user_id2 = #{targetUserId}
	</select>

	 <select id="selectFollowingUserIds" resultType="long">
        SELECT user_id2
        FROM follow
        WHERE user_id1 = #{userId}
    </select>


 <!-- 추천 유저를 팔로워 수 기준으로 내림차순으로 5명 가져오는 쿼리 -->
    <select id="getRecommendedUsersByFollowers" parameterType="int" resultType="UserDto">
        SELECT u.id, u.nickname, u.profile_image AS profileImage, 
               (SELECT COUNT(*) FROM follow f WHERE f.user_id2 = u.id) AS followerCount
        FROM user u
        WHERE u.id != #{userId} 
        AND u.id NOT IN (SELECT user_id2 FROM follow WHERE user_id1 = #{userId})
        ORDER BY followerCount DESC
        LIMIT 5
    </select>

 <resultMap id="BoardImageMap" type="BoardImageDto">
        <id property="id" column="image_id"/>
        <result property="boardId" column="board_id"/>
        <result property="fileName" column="file_name"/>
    </resultMap>

    <resultMap id="BoardWithImagesResultMap" type="BoardDto">
        <id property="id" column="board_id"/>
        <result property="userId" column="user_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="content" column="content"/>
        <result property="likesCount" column="likes_count"/>
        
        <!-- 이미지 리스트를 boardId 기준으로 결과 매핑 -->
        <collection property="images" ofType="com.example.demo.dto.BoardImageDto" resultMap="BoardImageMap"/>
    </resultMap>

    <!-- 좋아요 순 Top 게시글 조회 -->
    <select id="selectTopLikedBoardsWithImages" resultMap="BoardWithImagesResultMap">
        SELECT 
            b.id AS board_id,
            b.user_id,
            b.created_at,
            b.content,
            COUNT(bl.id) AS likes_count,
            bi.id AS image_id,
            bi.file_name
        FROM board b
        LEFT JOIN board_like bl ON b.id = bl.board_id
        LEFT JOIN board_image bi ON b.id = bi.board_id
        GROUP BY b.id, bi.id
        ORDER BY likes_count DESC
        LIMIT 10
    </select>


</mapper>
