<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.board.mapper.BoardMapper">

    <!-- 게시판 상세 정보 조회 (이미지, 좋아요 수 포함) -->
    <select id="selectBoardDetail" parameterType="int" resultMap="BoardDetailResultMap">
        SELECT
            b.id,
            b.created_at AS createdAt,
            b.content,
            u.id AS userId,
            u.nickname AS userNickname,
            u.profile_image AS userProfileImage,
            COUNT(DISTINCT bl.id) AS likesCount,
            COUNT(DISTINCT c.id) AS commentCount,
            bi.id AS imageId,
            bi.file_name AS fileName
        FROM 
            board b
        JOIN 
            user u ON b.user_id = u.id
        LEFT JOIN 
            board_like bl ON b.id = bl.board_id
        LEFT JOIN 
            board_image bi ON b.id = bi.board_id
        LEFT JOIN 
            comment c ON b.id = c.board_id
        WHERE 
            b.id = #{boardId}
        GROUP BY 
            b.id, b.created_at, b.content, u.id, u.nickname, u.profile_image, u.my_intro, bi.id, bi.file_name
        ORDER BY 
            b.created_at ASC
    </select>

    <!-- ResultMap 정의 (게시물 상세 정보 매핑) -->
    <resultMap id="BoardDetailResultMap" type="BoardDto">
        <id property="id" column="id"/>
        <result property="createdAt" column="createdAt"/>
        <result property="content" column="content"/>
        <result property="likesCount" column="likesCount"/>
        <result property="commentCount" column="commentCount"/>  <!-- 댓글 갯수 추가 -->
        
        <!-- User 정보 매핑 -->
        <association property="user" javaType="UserDto">
            <id property="id" column="userId"/>
            <result property="nickname" column="userNickname"/>
            <result property="profileImage" column="userProfileImage"/>
            <result property="myIntro" column="myIntro"/>
        </association>

        <!-- 이미지 목록 매핑 (1:N 관계) -->
        <collection property="images" ofType="BoardImageDto">
            <id property="id" column="imageId"/>
            <result property="fileName" column="fileName"/>
        </collection>
    </resultMap>

    <!-- 모든 게시판 목록 상세 정보 조회 -->
    <select id="selectAllBoardsWithDetails" resultMap="BoardDetailResultMap">
        SELECT
            b.id AS id,
            b.created_at AS createdAt,
            b.content AS content,
            u.id AS userId,
            u.nickname AS userNickname,
            u.profile_image AS userProfileImage,
            u.my_intro AS myIntro,
            COUNT(DISTINCT bl.id) AS likesCount,
            COUNT(c.id) AS commentCount,  -- 댓글 갯수를 카운트
            bi.id AS imageId,
            bi.file_name AS fileName
        FROM 
            board b
        JOIN 
            user u ON b.user_id = u.id
        LEFT JOIN 
            board_like bl ON b.id = bl.board_id
        LEFT JOIN 
            board_image bi ON b.id = bi.board_id
        LEFT JOIN 
            comment c ON b.id = c.board_id  -- 댓글 테이블과 조인
        GROUP BY 
            b.id, u.id, bi.id, bi.file_name
        ORDER BY 
            b.created_at DESC
    </select>

    <!-- 댓글 관련 ResultMap -->
    <resultMap id="CommentResultMap" type="CommentDto">
        <id property="id" column="id"/>
        <result property="parentId" column="parentId"/>
        <result property="boardId" column="boardId"/>
        <result property="comment" column="comment"/>
        <result property="createdAt" column="createdAt"/>
        
        <!-- 댓글 작성자 정보 -->
        <association property="user" javaType="UserDto">
            <id property="id" column="userId"/>
            <result property="nickname" column="userNickname"/>
            <result property="profileImage" column="userProfileImage"/>
        </association>
    </resultMap>

<!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="CommentDto">
        INSERT INTO comment (board_id, user_id, comment, created_at)
        VALUES (#{boardId}, #{userId}, #{comment}, NOW())
    </insert>
    
     <!-- 답글 작성 -->
    <insert id="insertReply" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comment (board_id, user_id, comment, parent_id, created_at)
        VALUES (#{boardId}, #{userId}, #{comment}, #{parentId}, NOW())
    </insert>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment">
        DELETE FROM comment WHERE id = #{id}
    </delete>
    
    
    <!-- 특정 게시물에 대한 댓글 조회 -->
    <select id="selectCommentsByBoardId" resultMap="CommentResultMap">
        SELECT 
            c.id, 
            c.parent_id AS parentId, 
            c.board_id AS boardId, 
            c.user_id AS userId, 
            c.comment, 
            c.created_at AS createdAt,
            u.nickname AS userNickname, 
            u.profile_image AS userProfileImage
        FROM 
            comment c
        JOIN 
            user u ON c.user_id = u.id
        WHERE 
            c.board_id = #{boardId}
        ORDER BY 
            c.created_at ASC
    </select>
    
    
  <select id="isLiked" resultType="int">
        SELECT COUNT(*) FROM board_like
        WHERE board_id = #{postId} AND user_id = #{userId}
    </select>

    <insert id="insertLike">
        INSERT INTO board_like (user_id, board_id)
        VALUES (#{userId}, #{postId})
    </insert>

    <delete id="deleteLike">
        DELETE FROM board_like
        WHERE user_id = #{userId} AND board_id = #{postId}
    </delete>

    <select id="countLikes" resultType="int">
        SELECT COUNT(*) FROM board_like
        WHERE board_id = #{postId}
    </select>
    



</mapper>
